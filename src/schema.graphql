type Query {
  articles: [Article]
  article(id: ID!): Article
  articleBySlug(slug: String!): Article
  articlesByUser(userId: ID!, drafts: Boolean): [Article]
  me: User!
  stripeSession(id: ID!): StripeSession!
  user(username: String!): User
  unsplashPhoto(search: String): [UnsplashPhoto]
}

type Mutation {
  createOrUpdateArticle(input: CreateOrUpdateArticleInput!): CreateOrUpdateArticlePayload!
  publishArticle(input: PublishArticleInput!): PublishArticlePayload!
  deleteArticle(input: DeleteArticleInput!): DeleteArticlePayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  connectStripeAccount(input: ConnectStripeAccountInput!): ConnectStripeAccountPayload!
  createStripeSession(input: CreateStripeSessionInput): CreateStripeSessionPayload!
}

type Article {
  id: ID!
  title: String!
  summary: String
  content: String
  headerImageURL: String
  author: User!
  categories: [Category]
  comments: [Comment]
  likes: Int!
  wordLength: Int!
  createdAt: String!
  updatedAt: String!
  publishedAt: String
  deletedAt: String
  userId: String!
  subscribersOnly: Boolean!
  slug: String
  contentBlocked: Boolean
}

type User {
  id: ID!
  firstName: String!
  lastName: String
  username: String!
  email: String!
  profileImageURL: String
  following: [String]
  followers: [String]
  subscribers: [String]
  createdAt: String!
  updatedAt: String!
  stripeUserId: String
}

type Category {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID
  user: User!
  message: String!
  replies: [Comment]
  createdAt: String!
  updatedAt: String!
}

type UnsplashPhoto {
  id: ID!
  urls: UnsplashPhotoURLs!
  photographerName: String!
}

type UnsplashPhotoURLs {
  raw: String!
  full: String!
  regular: String!
  small: String!
  thumb: String!
}

type StripeSession {
  id: ID!
  status: String
}

input CreateOrUpdateArticleInput {
  id:  ID
  title: String
  summary: String
  content: String
  headerImageURL: String
  createdAt: String
  updatedAt: String
  userId: String
  subscribersOnly: Boolean
}

type CreateOrUpdateArticlePayload {
  id: ID!
}

input PublishArticleInput {
  id: ID!
  article: CreateOrUpdateArticleInput
}

type PublishArticlePayload {
  id: ID!
  slug: String!
}

input DeleteArticleInput {
  id: ID!
}

type DeleteArticlePayload {
  id: ID!
}

input CreateUserInput {
  id: ID!
  email: String!
  firstName: String!
  lastName: String
}

type CreateUserPayload {
  id: ID!
  username: String!
}

input ConnectStripeAccountInput {
  userId: String!
  authCode: String!
}

type ConnectStripeAccountPayload {
  success: Boolean!
}

input CreateStripeSessionInput {
  amount: Int!
  redirectUrl: String!
}

type CreateStripeSessionPayload {
  id: ID!
}
